{"ast":null,"code":"var _jsxFileName = \"G:\\\\Cour Sup\\\\PROJECT\\\\Project Transversale\\\\comi\\\\src\\\\pages\\\\Formation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Cards from '../components/Formation/Cards';\nimport HeadApp from '../components/HeadApp';\nimport \"./FormationStyle/Formation.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Formation = () => {\n  _s();\n\n  const [trigger, setTrigger] = useState(false);\n  const [titleFormation, setTitleFormation] = useState('');\n  const [filterData, setFilterData] = useState([]);\n  const [cardData, setCardData] = useState([{\n    \"type\": \"text\",\n    \"title\": \"Lutte contre le blanchiment et le financement du Terrorisme.\",\n    \"content\": \"Une formation apportant les informations concernant le blanchiment et le financement du terrorisme\",\n    \"time\": \"10 minutes\"\n  }, {\n    \"type\": \"quizz\",\n    \"title\": \"Les Fondamentaux de l'assurance\",\n    \"content\": \"Une formation apportant les informations concernant le blanchiment et le financement du terrorisme\",\n    \"time\": \"15 minutes\"\n  }, {\n    \"type\": \"video\",\n    \"title\": \"Fiscalité de l'assurance vie\",\n    \"content\": \"Une formation apportant les informations concernant le blanchiment et le financement du terrorisme\",\n    \"time\": \"15 minutes\"\n  }, {\n    \"type\": \"video\",\n    \"title\": \"Fiscalité de l'assurance vie\",\n    \"content\": \"Une formation apportant les informations concernant le blanchiment et le financement du terrorisme\",\n    \"time\": \"15 minutes\"\n  }]);\n\n  const triggerSetting = () => {\n    if (trigger === true) return setTrigger(false);\n    if (trigger === false) return setTrigger(true);\n  };\n\n  const filterSetting = arg => {\n    if (filterData !== arg) return setFilterData(arg);\n    if (filterData == arg) return setFilterData('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Formation-Page\",\n    children: [/*#__PURE__*/_jsxDEV(HeadApp, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-formationPage\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trie\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Vos formations du mois\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"trie-name\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => filterSetting('video'),\n            children: \"Formation vid\\xE9o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => filterSetting('text'),\n            children: \"Formation texte\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => filterSetting('quizz'),\n            children: \"Formation quiz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardsFormation\",\n        children: filterData ? // '?' veut dire 'if' dans ce cas 'y a une valeur dans filterData ?'\n        cardData.filter(data => data.type.includes(filterData)) //on filter la valeur qu'on veut map, en comparant le type avec le contrenu de filterData\n        .map(data => /*#__PURE__*/_jsxDEV(Cards, {\n          data: data,\n          trigger: triggerSetting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this)) : // ':' veut dire 'else'. Dans ce cas on fait un map de tout les valeur si y a rien dans filderData\n        cardData.map(data => /*#__PURE__*/_jsxDEV(Cards, {\n          data: data,\n          title: setTitleFormation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Formation, \"JSGHfB/nURo3IXUYDhS2lkCVfp8=\");\n\n_c = Formation;\nexport default Formation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Formation\");","map":{"version":3,"sources":["G:/Cour Sup/PROJECT/Project Transversale/comi/src/pages/Formation.js"],"names":["React","useState","Cards","HeadApp","Formation","trigger","setTrigger","titleFormation","setTitleFormation","filterData","setFilterData","cardData","setCardData","triggerSetting","filterSetting","arg","filter","data","type","includes","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport Cards from '../components/Formation/Cards';\r\nimport HeadApp from '../components/HeadApp';\r\nimport \"./FormationStyle/Formation.scss\";\r\n\r\n\r\n\r\n\r\n\r\nconst Formation = () => {\r\n    const [trigger, setTrigger] = useState(false)\r\n\r\n\r\n\r\n    const [titleFormation, setTitleFormation] = useState('')\r\n    const [filterData, setFilterData] = useState([])\r\n\r\n    const [cardData, setCardData] = useState([\r\n        {\r\n         \"type\" : \"text\",\r\n         \"title\":\"Lutte contre le blanchiment et le financement du Terrorisme.\",\r\n         \"content\": \"Une formation apportant les informations concernant le blanchiment et le financement du terrorisme\",\r\n         \"time\": \"10 minutes\"\r\n        },\r\n        {\r\n         \"type\" : \"quizz\",\r\n         \"title\":\"Les Fondamentaux de l'assurance\",\r\n         \"content\": \"Une formation apportant les informations concernant le blanchiment et le financement du terrorisme\",\r\n         \"time\": \"15 minutes\"\r\n        },\r\n        {\r\n         \"type\" : \"video\",\r\n         \"title\": \"Fiscalité de l'assurance vie\",\r\n         \"content\": \"Une formation apportant les informations concernant le blanchiment et le financement du terrorisme\",\r\n         \"time\": \"15 minutes\"\r\n        },\r\n        {\r\n         \"type\" : \"video\",\r\n         \"title\": \"Fiscalité de l'assurance vie\",\r\n         \"content\": \"Une formation apportant les informations concernant le blanchiment et le financement du terrorisme\",\r\n         \"time\": \"15 minutes\"\r\n        }\r\n    ])\r\n\r\n    const triggerSetting = () => {\r\n        if(trigger === true) return setTrigger(false)\r\n        if(trigger === false) return setTrigger(true)\r\n    }\r\n\r\n\r\n\r\n    const filterSetting = (arg) => {\r\n        if(filterData !== arg) return setFilterData(arg)\r\n        if(filterData == arg) return setFilterData('')\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className='Formation-Page'>\r\n            <HeadApp/>\r\n            <div className=\"content-formationPage\">\r\n                <div className=\"trie\">\r\n                    <p>Vos formations du mois</p>\r\n                    <div className=\"trie-name\">\r\n                        <button onClick={() => filterSetting('video')}>Formation vidéo</button>\r\n                        <button onClick={() => filterSetting('text')}>Formation texte</button>\r\n                        <button onClick={() => filterSetting('quizz')}>Formation quiz</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"cardsFormation\">\r\n                    {\r\n                     filterData ? // '?' veut dire 'if' dans ce cas 'y a une valeur dans filterData ?'\r\n                      cardData.\r\n                      filter((data) => data.type.includes(filterData)) //on filter la valeur qu'on veut map, en comparant le type avec le contrenu de filterData\r\n                      .map((data) => (\r\n                        <Cards data={data} trigger={triggerSetting}/>  \r\n                      ))\r\n                      : // ':' veut dire 'else'. Dans ce cas on fait un map de tout les valeur si y a rien dans filderData\r\n                      cardData.map((data) => (\r\n                        <Cards data={data} title={setTitleFormation}/>\r\n                    ))}\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Formation;"]},"metadata":{},"sourceType":"module"}